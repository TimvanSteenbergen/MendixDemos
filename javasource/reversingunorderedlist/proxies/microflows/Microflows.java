// This file was generated by Mendix Modeler 7.20.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package reversingunorderedlist.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the ReversingUnorderedList module
	public static java.util.List<reversingunorderedlist.proxies.Order> aCT_Order_Reverse(IContext context, java.util.List<reversingunorderedlist.proxies.Order> _orders)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_orders = null;
			if (_orders != null)
			{
				listparam_orders = new java.util.ArrayList<IMendixObject>();
				for (reversingunorderedlist.proxies.Order obj : _orders)
					listparam_orders.add(obj.getMendixObject());
			}
			params.put("Orders", listparam_orders);
			java.util.List<IMendixObject> objs = Core.execute(context, "ReversingUnorderedList.ACT_Order_Reverse", params);
			java.util.List<reversingunorderedlist.proxies.Order> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<reversingunorderedlist.proxies.Order>();
				for (IMendixObject obj : objs)
					result.add(reversingunorderedlist.proxies.Order.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<reversingunorderedlist.proxies.Order> sub_reverse(IContext context, java.util.List<reversingunorderedlist.proxies.Order> _orders, java.util.List<reversingunorderedlist.proxies.Order> _ordersReversed)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_orders = null;
			if (_orders != null)
			{
				listparam_orders = new java.util.ArrayList<IMendixObject>();
				for (reversingunorderedlist.proxies.Order obj : _orders)
					listparam_orders.add(obj.getMendixObject());
			}
			params.put("Orders", listparam_orders);
			java.util.ArrayList<IMendixObject> listparam_ordersReversed = null;
			if (_ordersReversed != null)
			{
				listparam_ordersReversed = new java.util.ArrayList<IMendixObject>();
				for (reversingunorderedlist.proxies.Order obj : _ordersReversed)
					listparam_ordersReversed.add(obj.getMendixObject());
			}
			params.put("OrdersReversed", listparam_ordersReversed);
			java.util.List<IMendixObject> objs = Core.execute(context, "ReversingUnorderedList.Sub_reverse", params);
			java.util.List<reversingunorderedlist.proxies.Order> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<reversingunorderedlist.proxies.Order>();
				for (IMendixObject obj : objs)
					result.add(reversingunorderedlist.proxies.Order.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void sub_TestMultipleOrders(IContext context, java.lang.Long _numberOfOrders)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("NumberOfOrders", _numberOfOrders);
			Core.execute(context, "ReversingUnorderedList.Sub_TestMultipleOrders", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void test_Reverse0000Orders(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ReversingUnorderedList.Test_Reverse0000Orders", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void test_Reverse0001Orders(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ReversingUnorderedList.Test_Reverse0001Orders", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void test_Reverse0002Orders(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ReversingUnorderedList.Test_Reverse0002Orders", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void test_Reverse0010Orders(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ReversingUnorderedList.Test_Reverse0010Orders", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void test_Reverse0200Orders(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ReversingUnorderedList.Test_Reverse0200Orders", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void test_Reverse0500Orders(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ReversingUnorderedList.Test_Reverse0500Orders", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static void test_Reverse1000Orders(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			Core.execute(context, "ReversingUnorderedList.Test_Reverse1000Orders", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}